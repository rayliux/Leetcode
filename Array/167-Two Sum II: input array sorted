The link is https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/.
Given that the array is already sorted, the case is simple. Use two pointers, one pass.
Time complexity is O(n), space complexity is O(1).



class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int i = 0, j = nums.size() - 1;
        vector<int> res;
        while (i <= j) {
            if (nums[i] + nums[j] == target) {
                res.push_back(i + 1);
                res.push_back(j + 1);
                return res;
            }
            else if (nums[i] + nums[j] < target) ++i;
            else --j;
        }
        return res;
    }
};



class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int i = 0, j = numbers.length - 1;
        int[] res = new int[2];
        while (i <= j) {
            if (numbers[i] + numbers[j] == target) {
                res[0] = i + 1;
                res[1] = j + 1;
                return res;
            }
            else if (numbers[i] + numbers[j] < target) ++i;
            else --j;
        }
        return res;
    }
}



class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        i, j = 0, len(numbers) - 1
        while i <= j:
            if numbers[i] + numbers[j] == target:
                return [i + 1, j + 1]
            elif numbers[i] + numbers[j] < target:
                i += 1
            else:
                j -= 1
        return []

The link is https://leetcode.com/problems/two-sum/.
Key idea is to record every element's value and its index in a map(space for time), so we can deal with them one by one(one-pass).
Time complexity is O(n), space complexity is O(nlogn). O(n) space time if you use hash or unordered_map.



class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        if (nums.size() <= 1) return nums;
        vector<int> res;
        map<int, int> mp;
        for (int i = 0; i < nums.size(); ++i) {
            if (mp.find(target - nums[i]) != mp.end()) {
                res.push_back(mp[target - nums[i]]);
                res.push_back(i);
                return res;
            }
            else {
                mp[nums[i]] = i;
            }
        }
        return res;
    }
};



class Solution {
    public int[] twoSum(int[] nums, int target) {
        if (nums.length <= 1) return nums;
        Map<Integer, Integer> mp = new HashMap<Integer, Integer>();
        int[] res = new int[2];
        for (int i = 0; i < nums.length; ++i) {
            if (mp.containsKey(target - nums[i])) {
                res[0] = mp.get(target - nums[i]);
                res[1] = i;
                return res;
            }
            else {
                mp.put(nums[i], i);
            }
        }
        return res;
    }
}



class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        if len(nums) <= 1:
            return []
        mp = {}
        for i in range(len(nums)):
            if nums[i] not in mp:
                mp[target - nums[i]] = i
            else:
                return [mp[nums[i]], i]
                
class Solution {
    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {
        var mp = [Int: Int]()
        for (i, n) in nums.enumerated() {
            if let k = mp[target - n] {
                return [k, i]
            }
            mp[n] = i
        }
        fatalError("no")
        // return [Int]()
    }
}                

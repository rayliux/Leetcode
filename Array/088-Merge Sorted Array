The link is: https://leetcode.com/problems/merge-sorted-array/.
Time complexity is O(n), from end to beginning, space complexity is O(1).



class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i;
        if (n == 0) return;
        if (m == 0) {
            nums1 = nums2;
            return;
        }
        for (i = m + n - 1; i >= 0; --i) {
            if (nums1[m - 1] >= nums2[n - 1]) {
                nums1[i] = nums1[m - 1];
                --m;
            }
            else {
                nums1[i] = nums2[n - 1];
                --n;
            }
            if (m == 0) {
                while (i > 0) nums1[--i] = nums2[--n];
                return;
            }
            if (n == 0) return;
        }
        return;
    }
};



public void merge(int A[], int m, int B[], int n) {
    int length = m+n;
    while(n > 0) A[--length] = (m == 0 || A[m-1] < B[n-1]) ? B[--n] : A[--m];
}



class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        while m > 0 and n > 0:
            if nums1[m - 1] >= nums2[n - 1]:
                nums1[m + n - 1] = nums1[m - 1]
                m -= 1
            else:
                nums1[m + n - 1] = nums2[n - 1]
                n -= 1
        nums1[:n] = nums2[:n]

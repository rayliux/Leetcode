The link is: https://leetcode.com/problems/plus-one/.
Time complexity is O(n), from end to beginning one by one; space complexity is O(1), in-place.



class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        int j = digits.size() - 1;
        if (digits[j] != 9) {
            digits[j]++;
            return digits;
        }
        else {
            while (j >= 0 && digits[j] == 9) digits[j--] -= 9;
            if (j >= 0) {
                digits[j]++;
                return digits;
            }
            else {
                digits.insert(digits.begin(), 1); // two pass
                return digits;
            }
        }
        return digits;
    }
};



class Solution { // one pass
    public int[] plusOne(int[] digits) {
        int j;
        for (j = digits.length - 1; j >= 0; --j) {
            if (digits[j] != 9) {
                digits[j]++;
                return digits;
            }
            else {
                digits[j] -= 9;
            }
        }
        if (j < 0) {
            int[] res = new int[digits.length + 1];
            res[0] = 1;
            return res;
        }
        return digits;
    }
}



class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        for i in range(len(digits)):
            if digits[~i] != 9:
                digits[~i] += 1
                return digits
            else:
                digits[~i] -= 9
                i += 1
        return [1] + [0] * len(digits)

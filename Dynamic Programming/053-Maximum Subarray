The link is: https://leetcode.com/problems/maximum-subarray/.
This is the simplest problem in DP.

Here is the key idea for solving a DP probleam, 3 steps as follow:
1. identify subproblem structure. First define a subproblem, then find the dependency.
2. find out the order of solving subproblems.
3. running time analysis.

In this problem, the subproblem is:
Let S[i] = summation from a[0] to a[i].
S[i] = max(S[i - 1] + a[i], 0).
The order is solving from beginning to end.
The running time is O(n), which might be amazing for beginners



class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if (nums.empty()) return 0;
        int mx = nums[0];
        for (int i = 1; i < nums.size(); ++i) {
            nums[i] = max(nums[i - 1] + nums[i], nums[i]);
            if (mx < nums[i]) mx = nums[i];
        }
        return mx;
    }
};



class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        if nums == []:
            return 0
        mx = nums[0]
        for i in range(1, len(nums)):
            nums[i] = max(nums[i - 1] + nums[i], nums[i])
            if mx < nums[i]:
                mx = nums[i]
        return mx
